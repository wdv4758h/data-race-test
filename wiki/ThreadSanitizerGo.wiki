= Go Race Detector User Manual =

The tool works for linux amd64. No portability guarantees at the moment.

Everything is currently in one CL. We will refactor it and rearrange into smaller CLs
for reviewing later. We will also clean unused code, variable names etc. Currently our aim is to show you how the tool is designed to work and that it actually works.

1. You need to download ThreadSanitizer first: 

{{{
export TSAN_PATH=/home/$USER/tsan
svn checkout http://data-race-test.googlecode.com/svn/trunk/ $TSAN_PATH
cd $TSAN_PATH/go
DEBUG=1 make
sudo make install
}}}

2. Download a fresh version of Go tip:

{{{
export GOROOT=/home/$USER/go_race
export GOBIN=$GOROOT/bin
export PATH=$GOBIN:$PATH

hg clone https://code.google.com/p/go $GOROOT
}}}

3. Build the tree. We keep working with makefiles until Go tool is stable:

{{{
export USE_GO_TOOL=false
cd $GOROOT/src
./make.bash
}}}

4. Set the email that you use for codereview.appspot.com and
apply the CL:

{{{

YOUR_EMAIL=name@domain.com

cat > $GOROOT/.hg/hgrc <<EOF
[paths]
default = https://go.googlecode.com/hg/

[extensions]
codereview = $GOROOT/lib/codereview/codereview.py

[codereview]
server = codereview.appspot.com

[ui]
username = $YOUR_EMAIL


EOF

cd $GOROOT
hg clpatch 5251057
}}}

In case you can’t apply the patch these versions are known to fit each other:

{{{
weekly: 6g weekly.2012-01-15 11260+
CL: Patch Set 56 : diff -r 70e914beb409 https://go.googlecode.com/hg/
}}}

5. We will now build our package and rebuild the tree with instrumentation enabled:

{{{
cd $GOROOT/misc/racecheck/gotsan
./build.bash
}}}

6. A simple Go program containing a data race may be found at $GOROOT/misc/racecheck/gotsan/race.go. To run it and see the report use the following series of commands:

{{{
cd $GOROOT/misc/racecheck/gotsan
6g -b race.go && 6l -o race race.6 && ./race
}}}

The output you should see looks like this:

{{{
==22257== INFO: Allocating 256Mb (32 * 8M) for Segments.
==22257== INFO: Will allocate up to 640Mb for 'previous' stack traces.
 sizeof(CacheLine) = 568
==22257== INFO: T0 is program's main thread
==22257== INFO: T1 has been created by T0. Use --announce-threads to see the creation stack.
==22257== WARNING: Possible data race during write of size 1 at 0xf840000000: {{{
==22257==    T1 (L{}):
==22257==     #0  main._func_001 ~/go/misc/racecheck/gotsan/race.go:10
==22257==     #1  runtime.goexit ~/go/src/pkg/runtime/proc.c:266
==22257==   Concurrent write(s) happened at (OR AFTER) these points:
==22257==    T0 (L{}):
==22257==     #0  main.main ~/go/misc/racecheck/gotsan/race.go:13
==22257==     #1  runtime.main ~/go/src/pkg/runtime/proc.c:238
==22257==    Race verifier data: 0x400da1,0x400caf
==22257== }}}

ThreadSanitizer has received 24 events
1 READs
6 WRITEs
1 SIGNALs
1 WAITs
3 RTN_CALLs
3 RTN_EXITs

}}}

7. Your package’s tests can be run with race detection enabled too. We will test
src/pkg/archive/zip as an example. This particular race is already fixed in Go latest weekly so it is here for the purposes of showing you a sample log:

{{{
cd $GOROOT/src/pkg/archive/zip
GCFLAGS=-b gotest

The output should contain lines like these (if it doesn’t, run the test several times):

==22413== WARNING: Possible data race during read of size 1 at 0xf8400563d0: {{{
==22413==    T2 (L{}):
==22413==     #0  archive/zip._func_002 ~/go/src/pkg/archive/zip/reader_test.go:167
==22413==     #1  runtime.goexit ~/go/src/pkg/runtime/proc.c:266
==22413==   Concurrent write(s) happened at (OR AFTER) these points:
==22413==    T1 (L{}):
==22413==     #0  archive/zip.readTestZip ~/go/src/pkg/archive/zip/reader_test.go:165
==22413==     #1  archive/zip.TestReader ~/go/src/pkg/archive/zip/reader_test.go:122
==22413==     #2  testing.tRunner ~/go/src/pkg/testing/testing.go:189
==22413==     #3  runtime.goexit ~/go/src/pkg/runtime/proc.c:266
==22413==    Race verifier data: 0x42083d,0x41d073
==22413== }}}

}}}

The log suggests that there is a data race between lines 165 and 167 in reader_test.go. Here is the relevant code snippet:

{{{
161	// test simultaneous reads
162	n := 0
163	done := make(chan bool)
164	for i := 0; i < 5; i++ {
165		for j, ft := range zt.File {
166			go func() {
167				readTestFile(t, ft, z.File[j])
168				done <- true
169			}()
170			n++
172		}
173	}
174	for ; n > 0; n-- {
175		<-done
176	}
}}}

What we observe here is wrong usage of both j and ft, see http://golang.org/doc/go_faq.html#closures_and_goroutines

8. Other races found by ThreadSanitizer can be observed in Go issue list: http://code.google.com/p/go/issues/list?can=1&q=label%3AThreadSanitizer

9. The slowdown imposed by the tool may be 20x and higher, so please be patient when running your programs. Also, please remember that this version is not final and the tool may unexpectedly crash.