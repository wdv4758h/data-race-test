= Go Race Detector User Manual =

The tool works for linux amd64. No portability guarantees at the moment.

Everything is currently in a the fork of the original Go repository:
http://code.google.com/r/maximpimenov-go1-tsan/.
The version of the original repo is go1.0.1. Any program compatible with Go 1 should be compatible with our toolchain. If it is not, please file an issue.

1. You need to download ThreadSanitizer first: 

{{{
export TSAN_PATH=/home/$USER/tsan
svn checkout http://data-race-test.googlecode.com/svn/trunk/ $TSAN_PATH
cd $TSAN_PATH/go
make
sudo make install
}}}

2. Download the modified compiler from the forked repository:

{{{
export GOROOT=/home/$USER/go_race
export GOBIN=$GOROOT/bin
export PATH=$GOBIN:$PATH

hg clone -r 85ae661f7a02 https://maxim.pimenov%40phystech.edu@code.google.com/r/maximpimenov-go1-tsan/ $GOROOT
}}}

3. Build the tree.

{{{
cd $GOROOT/src && ./make.bash
}}}

4. Test that the package is installed correctly:
{{{
cd $GOROOT/src/pkg/gotsan
go install -a -race
go run -race testtsan.go
}}}

Around 80% of tests should pass.

5. A simple Go program containing a data race may be found at $GOROOT/src/pkg/gotsan/race.go. To run it and see the report use the following command:

{{{
go run -race race.go
}}}

The output you should see looks like this:

{{{
INFO: Allocating 256Mb (32 * 8M) for Segments.
INFO: Will allocate up to 640Mb for 'previous' stack traces.
INFO: T0 is program's main thread
INFO: T2 has been created by T0. Use --announce-threads to see the creation stack.
WARNING: Possible data race during write of size 1 at 0xf840000100: {{{
   T2 (L{}):
    #0  main._func_001 ~/go/src/pkg/gotsan/race.go:12
    #1  runtime.goexit ~/go/src/pkg/runtime/proc.c:279
  Concurrent write(s) happened at (OR AFTER) these points:
   T0 (L{}):
    #0  main.main ~/go/src/pkg/gotsan/race.go:15
    #1  runtime.main ~/go/src/pkg/runtime/proc.c:251
  Location 0xf840000100 is 0 bytes inside a block starting at 0xf840000100 of size 8 allocated by T0 from heap:
    #0  main.main ~/go/src/pkg/gotsan/race.go:9
    #1  runtime.main ~/go/src/pkg/runtime/proc.c:251
}}} }}}
ThreadSanitizer summary: reported 1 warning(s) (1 race(s))
}}}

6. Your packageâ€™s tests can be run with race detection enabled too. We will test
src/pkg/image as an example.

{{{
cd $GOROOT/src/pkg/image
go install -a -race
go test -race
}}}
*NOTE: Providing the '-a' flag to 'go install' is important.*

The output should contain lines like these:
{{{
INFO: Allocating 256Mb (32 * 8M) for Segments.
INFO: Will allocate up to 640Mb for 'previous' stack traces.
sizeof(CacheLine) = 568
PASS
ThreadSanitizer summary: reported 0 warning(s) (0 race(s))
ok  	image	10.257s

}}}

Looks like there are no races in this package and its tests!

7. Some races found by ThreadSanitizer can be observed in Go issue list: http://code.google.com/p/go/issues/list?can=1&q=label%3AThreadSanitizer

8. The slowdown imposed by the tool may be 20x and higher, so please be patient when running your programs. The memory overhead is high
too. Also, please file an issue if you program crashes because of the tool.