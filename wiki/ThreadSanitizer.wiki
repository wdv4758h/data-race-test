#summary ThreadSanitizer is a Valgrind-based detector of data races
#labels Featured

*NEW*: ThreadSanitizer paper was presented at [http://www.dyninst.org/wbia09/ WBIA'09]: http://pintool.org/wbia09.pdf, pages 62-71.

<wiki:toc max_depth="1" />


= Introduction =

*!ThreadSanitizer* (aka *tsan*) is a data race detector for C/C++ programs. <BR>
The Linux and Mac versions are based on [http://www.valgrind.org Valgrind]. <BR>
The Windows version is based on [http://www.pintool.org PIN]. <BR>
!ThreadSanitizer is similar to [http://valgrind.org/docs/manual/hg-manual.html Helgrind] in many ways, but it also has several 
[ThreadSanitizerVsOthers differences]. <BR>
The instrumentation code is partially taken from Helgrind; 
the [ThreadSanitizerAlgorithm race detection machinery] is new (the code is written in C++). <BR>
The source code is published under GPLv2+.

!ThreadSanitizer is being actively developed and used at [http://www.google.com Google].

See also: 
  * ThreadSanitizerAlgorithm
  * MemoryUsage
  * ThreadSanitizerSuppressions
  * ThreadSanitizerIgnores
  * ThreadSanitizerVsOthers
  * UnderstandingThreadSanitizerReports
  * RacecheckUnittest
  * DynamicAnnotations
  * RaceCheckerClass
  * RaceDetectionLinks: links to other materials related to race detection
  * PopularDataRaces
  * ThreadSanitizerOffline: offline race detector
  * ThreadSanitizerPin: [http://www.pintool.org PIN]-based variant

Contacts: *data-race-test(#)googlegroups.com*

=Binaries=
ThreadSanitizer is supported on the following platforms: 
  * Linux x86_64 and x86. Tested on Ubuntu 8.04 and 9.10. 
  * Darwin i386 (MacOS X 10.5).
  * Windows i386 (Tested on Vista and XP)
  * In progress:
     * ARM Linux

You may download the fresh binaries from ThreadSanitizerBuildBot <BR>
If you want to build ThreadSanitizer, refer to BuildingThreadSanitizer  


=Using !ThreadSanitizer=
Just like any other valgrind-based tool: 
{{{
valgrind [valgrind options] --tool=tsan [tsan options] your/program [program options]
}}}
or (if you are using the self-contained binary):
{{{
tsan [tsan options] your/program [program options]
}}}


= Command line flags = 
|| Flag name || default || description ||
|| *Analysis sensitivity flags:* ||     || ThreadSanitizer can work in different modes that affect accuracy (number of detected bugs, number of false reports) and speed.||
|| --keep-history=0|1|2          || 1   ||  Keep the history of the previous accesses. By default, the stack traces of concurrent accesses are _almost_ precise. <BR> Setting this option to zero will make the tool run 10%-30% faster, but the concurrent accesses will not be printed. <BR> Use --keep-history=0 in continuous builds, and --keep-history=1 when analyzing reports. <BR> --keep-history=2 will print the exact positions of the concurrent access, but this may be VERY slow. In 99% of cases you don't need this anyway.||
||  --fast-mode=yes|no           || yes || Be faster, but miss some races (and avoid some false positives). <br> This mode is similar to [http://www.cs.washington.edu/homes/tom/pubs/eraser.pdf Eraser]'s initialization state. ||
||  --pure-happens-before=yes|no || yes  || Act as a pure happens-before detector. <br> Useful if you are testing a code which has a lot of custom synchronization, e.g. message passing, which is not annotated with DynamicAnnotations. ||
||        *Interface flags:*     ||     || Flags that affect the generated output. ||
||  --color                      ||  no || Add colors to the output using [http://en.wikipedia.org/wiki/ANSI_escape_code ANSI escape codes]. ||
||  --show-pc                    || no  || Show pc (program counter) in the stack traces. ||
||  --announce-threads           || no  || Show the the stack traces of thread creation . ||
||  --file-prefix-to-cut=file_prefix || ||   Remove `"^.*file_prefix"` from the printed file names.  You may pass this flag several times. ||
|| *Resource usage* || || ||
|| --max-sid ||8388608 (2^23) || This number of unique Segment IDs. <BR> This reflects the amount of memory allocated by !ThreadSanitizer at startup. One Segment ID requires ~100 bytes of memory, so by default approximately 800M of memory is allocated.<BR> The higher this number the better. This number can not be very small (<100000). The upper bound depends on the amount of available memory.  ||
|| --num-callers-in-history || 10 || The size of the stack trace stored for the concurrent accesses. <br> Increasing this number improves the reports and increases the memory footprint. ||
|| *Profiling* || || ||
|| --sample-events=N || 0 ||  If non zero, !ThreadSanitizer will sample one of 2^N events and at the end print the event profile. <br> This options could be used together with ThreadSanitizerIgnores. ||

= Screenshot= 
!ThreadSanitizer's output viewed in [http://www.vim.org vim] with syntax highlightning and the [RacecheckUnittest source code] in the second window: 

 http://data-race-test.googlecode.com/svn/trunk/images/tsan-in-vim3.png

= Misc =
!ThreadSanitizer is spelled without a space, i.e. not "Thread Sanitizer". :) 