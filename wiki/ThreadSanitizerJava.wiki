#summary ThreadSanitizer Java

= Introduction =

We want to apply ThreadSanitizer to programs written in Java. 

= Experimental offline detector based on java.lang.instrument=
*This is a prototype* 

Race detection consists of two parts: 
  * Running a Java program in a special 'instrumented' mode. This generates a text file  (one for each process) containing program events. 
  * Running ThreadSanitizerOffline on the generated file 


== Try it! ==
{{{
svn checkout http://data-race-test.googlecode.com/svn/trunk/ data-race-test-read-only
cd data-race-test-read-only
TOPDIR=`pwd`
# Build the instrumenter
cd $TOPDIR/third_party/java-thread-sanitizer
ant download
ant
# Build ThreadSanitizerOffline
cd $TOPDIR/tsan
make TS_offline OFFLINE=1  OS=linux ARCH=amd64 DEBUG=1 -j2
# Build and run tests
cd $TOPDIR/jtsan
make
./jtsan.sh ThreadSanitizerTest
../tsan/bin/amd64-linux-debug-ts_offline < jtsan.events > jtsan.out
head -30  jtsan.out
}}}
If you are lucky, you will get something like this: 

{{{
==18897== INFO: T7 has been created by T0. Use --announce-threads to see the creation stack.
==18897== INFO: T8 has been created by T0. Use --announce-threads to see the creation stack.
==18897== WARNING: Possible data race during write of size 1 at 0x227180285: {{{
==18897==    T8 (locks held: {}):
==18897==     #0  ThreadSanitizerTest$1.thread2 ThreadSanitizerTest.java:180
==18897==     #1  ThreadSanitizerTest$ThreadRunner.foo2 ThreadSanitizerTest.java:124
==18897==     #2  ThreadSanitizerTest$ThreadRunner$3.<init> ThreadSanitizerTest.java:139
==18897==     #3  ThreadSanitizerTest$ThreadRunner.<init> ThreadSanitizerTest.java:146
==18897==   Concurrent write(s) happened at (OR AFTER) these points:
==18897==    T7 (locks held: {}):
==18897==     #0  ThreadSanitizerTest$1.thread1 ThreadSanitizerTest.java:179
==18897==     #1  ThreadSanitizerTest$ThreadRunner.foo1 ThreadSanitizerTest.java:123
==18897==     #2  ThreadSanitizerTest$ThreadRunner$1MyThread.<init> ThreadSanitizerTest.java:132
==18897==     #3  ThreadSanitizerTest$ThreadRunner.<init> ThreadSanitizerTest.java:146
==18897== }}}
}}}


= Implementation notes =

== Definitions ==
  * *TID* (thread id) -- a 32-bit integer identifying a thread. The TID of the first (main) thread is 0, the TID of the 2-nd thread is 1 and so on. TIDs are not reused. 
  * *PC* -- a 64-bit integer which identifies a position in the Java byte code. There should be an external mechanism to match a PC to `{ClassName, RoutineName, FileName, FileLineNumber}`. 
  * *ID* -- a 64-bit integer identifying an object in memory. TODO(kcc): there are several ways to general such IDs, list them. 



== Event syntax == 
For the first protoype we propose to dump the events in a simple text form. 

Each event is a 5-tuple: `EVENT_NAME TID PC A B`. 
The events generated by the instrumented Java program would be: 

Read and write events:
  * `READ  TID PC ID SIZE`
  * `WRITE TID PC ID SIZE`
`SIZE` is rudimentary for Java and could always be 1. 

Routine call/enter/exit:
  * `RTN_CALL  TID PC 0 0`
  * `RTN_ENTER TID PC 0 0`
  * `RTN_EXIT  TID PC 0 0 `
An alternative to a pair `RTN_CALL/RTN_ENTER` would be to have
  * `RTN_CALL  TID PC TARGET_PC 0`

Memory allocation:
  * `MALLOC TID PC ID SIZE`

Thread events: 
  * `THR_CREATE TID PC CHILD_TID 0`
  * `THR_START  TID PC 0 0`
  * `THR_END    TID PC 0 0`
  * `THR_JOIN   TID PC JOINED_THREAD_TID 0`

Lock events: 
  * `LOCK   TID PC ID 0`
  * `UNLOCK TID PC ID 0`

Events generated by `notify()` and `wait()`
  * `SIGNAL TID PC ID 0`
  * `WAIT   TID PC ID 0`


= Unit tests = 
There is a set of unit tests for a Java race detector: RacecheckUnittest 

= Open questions =
  * How to handle `volatile`? 
  * How to handle `java.util.concurrent`? 