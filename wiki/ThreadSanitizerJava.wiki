#summary ThreadSanitizer Java

= Introduction =

We want to apply ThreadSanitizer to programs written in Java. 

= Offline detector =
The first prototype of ThreadSanitizer for Java should be an offline detector. 
Race detection would consist of two parts: 
  * Running a Java program in a special 'instrumented' mode. This will generate a text file  (one for each process) containing program events. 
  * Running ThreadSanitizerOffline on the generated file 

== Definitions ==
  * *TID* (thread id) -- a 32-bit integer identifying a thread. The TID of the first (main) thread is 0, the TID of the 2-nd thread is 1 and so on. TIDs are not reused. 
  * *PC* -- a 64-bit integer which identifies a position in the Java byte code. There should be an external mechanism to match a PC to `{ClassName, RoutineName, FileName, FileLineNumber}`. 
  * *ID* -- a uniq 64-bit ID identifying an object in memory. TODO(kcc): add more details and options. 


== Event syntax == 
For the first protoype we propose to dump the events in a simple text form. 

Each event is a 5-tuple: `EVENT_NAME TID PC A B`. 
  * `EVENT_NAME` is a string which identifies the kind of the event 
  * TID is a 32-bit integer in hexadecimal form. 
  * PC, A, B are 64-bit integers in hexadecimal form
  * ID: *TODO*

The events generated by the instrumented Java program would be: 

Read and write events:
  * `READ  TID PC ID SIZE`
  * `WRITE TID PC ID SIZE`
`SIZE` is rudimentary for Java and could always be 1. 

Routine call/enter/exit:
  * `RTN_CALL  TID PC 0 0`
  * `RTN_ENTER TID PC 0 0`
  * `RTN_EXIT  TID PC 0 0 `
An alternative to a pair `RTN_CALL/RTN_ENTER` would be to have
  * `RTN_CALL  TID PC TARGET_PC 0`

Memory allocation:
  * `MALLOC TID PC ID SIZE`

Thread events: 
  * `THR_CREATE TID PC CHILD_TID 0`
  * `THR_START  TID PC 0 0`
  * `THR_END    TID PC 0 0`
  * `THR_JOIN   TID PC JOINED_THREAD_TID 0`

Lock events: 
  * `LOCK   TID PC ID 0`
  * `UNLOCK TID PC ID 0`

Events generated by `notify()` and `wait()`
  * `SIGNAL TID PC ID 0`
  * `WAIT   TID PC ID 0`


= Unit tests = 
There is a set of unit tests for a Java race detector: RacecheckUnittest 

= Open questions =
  * How to handle `volatile`? 
  * How to handle `java.util.concurrent`? 