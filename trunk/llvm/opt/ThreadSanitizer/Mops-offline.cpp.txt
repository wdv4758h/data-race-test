//===- Hello.cpp - Example code from "Writing an LLVM Pass" ---------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements two versions of the LLVM "Hello World" pass described
// in docs/WritingAnLLVMPass.html
//
//===----------------------------------------------------------------------===//

#define DEBUG_TYPE "mops"
#include "llvm/Constants.h"
#include "llvm/DerivedTypes.h"
#include "llvm/Analysis/DebugInfo.h"
#include "llvm/Instructions.h"
#include "llvm/InstrTypes.h"
#include "llvm/InlineAsm.h"
#include "llvm/CallingConv.h"
#include "llvm/Pass.h"
#include "llvm/Target/TargetData.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Type.h"
#include "llvm/Function.h"
#include "llvm/Module.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/ADT/Statistic.h"

#include <stdint.h>
using namespace llvm;

namespace {
  // TsanOfflineInstrument - The second implementation with getAnalysisUsage implemented.
  struct TsanOfflineInstrument : public ModulePass { // {{{1
    static char ID; // Pass identification, replacement for typeid
    Constant *MopFn;
    TsanOfflineInstrument() : ModulePass(ID) {}

    virtual bool runOnModule(Module &M) {
      LLVMContext &Context = M.getContext();
      const PointerType *UIntPtr = Type::getInt32PtrTy(Context);
      const Type *Void = Type::getVoidTy(Context);
      MopFn = M.getOrInsertFunction("mop", Void,
                                    UIntPtr, Type::getInt32Ty(Context),Type::getInt32Ty(Context),
                                    (Type*)0);
      Function *tmp = cast<Function>(MopFn);
      tmp->setCallingConv(CallingConv::C);
      for (Module::iterator F = M.begin(), E = M.end(); F != E; ++F) {
        if (F->isDeclaration()) continue;
          for (Function::iterator BB = F->begin(), E = F->end(); BB != E; ++BB) {
            TsanOfflineInstrument::runOnBasicBlock(BB);
          }
      }
      return true;
    }

    void Instrument(BasicBlock::iterator &BI, bool isStore) {
      std::vector<Value*> Args(3);
      llvm::Instruction &IN = *BI;
      LLVMContext &Context = BI->getContext();
      IN.dump();
      if (isStore) {
        Args[0] = (static_cast<StoreInst&>(IN).getPointerOperand());
      } else {
        Args[0] = (static_cast<LoadInst&>(IN).getPointerOperand());
      }
      Args[0]->dump();
      Args[2] = ConstantInt::get(Type::getInt32Ty(BI->getContext()), isStore); 
      if (Args[0]->getType() == Type::getInt32PtrTy(Context)) {
      } else {
        Args[0] = BitCastInst::CreatePointerCast(Args[0], Type::getInt32PtrTy(BI->getContext()), "", BI);
      }
      int size = 32;
      if (Args[0]->getType()->isSized()) {
        size = getAnalysis<TargetData>().getTypeStoreSizeInBits(Args[0]->getType());
      }
      Args[1] = ConstantInt::get(Type::getInt32Ty(BI->getContext()), size/8); 
      CallInst::Create(MopFn, Args.begin(), Args.end(), "", BI);
    }

    virtual bool runOnBasicBlock(Function::iterator &BB) {
      errs() << "========BB===========\n";
      for (BasicBlock::iterator BI = BB->begin(), BE = BB->end();
           BI != BE; ++BI) { 
        if (isa<LoadInst>(BI)) {
          errs() << "<";
          // Instrument LOAD here
          TsanOfflineInstrument::Instrument(BI, false);
        } else {
          if (isa<StoreInst>(BI)) {
            errs() << ">";
            // Instrument STORE here
            TsanOfflineInstrument::Instrument(BI, true);
          } else {
            errs() << " ";
          }
        }
        errs() << "BI: " << BI->getOpcodeName() << "\n";
      }
      errs() << "========BB===========\n";
      return true;
    }
  private:
    virtual void getAnalysisUsage(AnalysisUsage &AU) const {
      AU.addRequired<TargetData>();
    }
  };
  // }}}

  typedef std::vector <Constant*> Passport;
  struct TsanOnlineInstrument : public ModulePass { // {{{1
    static char ID; // Pass identification, replacement for typeid
    int BBCount, ModuleFunctionCount, ModuleMopCount, TLEBIndex;
    Value *BBPassportGlob;
    int BBNumMops;
    Constant *MopFn, *BBStartFn, *BBEndFn, *BBFlushFn, *RtnCallFn, *RtnExitFn;
    const PointerType *UIntPtr, *MopTyPtr, *Int8Ptr;
    const Type *Int32;
    const Type *Void;
    const StructType *MopTy;
    const ArrayType *BBPassportType, *BBExtPassportType;
    const Type *TLEBTy, *TLEBPtrType;
    static const int kTLEBSize = 100;
    static const int kBBAddr = 1000;
    static const int kFNV1aPrime = 6733;
    int ModuleID;

    TsanOnlineInstrument() : ModulePass(ID) { }

    uintptr_t getAddr(int bb_index, int mop_index) {
      return ((ModuleID *kBBAddr) + bb_index) * kBBAddr + mop_index;
    }

    uintptr_t getModuleID(Module &M) {
      uintptr_t result = 0;
      char tmp;
      std::string name = M.getModuleIdentifier();
      for (size_t i = 0; i < name.size(); i++) {
        tmp = name[i];
        result = (result ^ tmp) % 512;
        result = (result * kFNV1aPrime) % 512;
      }
      return result;
    }

    virtual bool runOnModule(Module &M) {
      BBCount = 0;
      ModuleFunctionCount = 0;
      ModuleMopCount = 0;
      ModuleID = getModuleID(M);
      LLVMContext &Context = M.getContext();
      UIntPtr = Type::getInt32PtrTy(Context);
      Int32 = Type::getInt32Ty(Context);
      Int8Ptr = PointerType::get(Type::getInt8Ty(Context), 0);
      Void = Type::getVoidTy(Context);
      MopTy = StructType::get(Context, Int32, Int32, Int32, NULL);
      MopTyPtr = PointerType::get(MopTy, 0);
      BBExtPassportType = ArrayType::get(MopTy, kTLEBSize);
      TLEBTy = ArrayType::get(UIntPtr, kTLEBSize);
      TLEBPtrType = PointerType::get(UIntPtr, 0);
      MopFn = M.getOrInsertFunction("mop", Void,
                                    UIntPtr, Int32, Int32,
                                    (Type*)0);
      BBStartFn = M.getOrInsertFunction("bb_start", TLEBPtrType, (Type*)0);
      BBEndFn = M.getOrInsertFunction("bb_end",
                                      Void,
                                      MopTyPtr, Int32, (Type*)0);
      BBFlushFn = M.getOrInsertFunction("bb_flush",
                                        TLEBPtrType,
                                        MopTyPtr, Int32, Int32, (Type*)0);
      RtnCallFn = M.getOrInsertFunction("rtn_call",
                                        Void,
                                        Int8Ptr, (Type*)0);
      RtnExitFn = M.getOrInsertFunction("rtn_exit",
                                        Void, (Type*)0);
      int nBB = 1, FnBB = 1;
      for (Module::iterator F = M.begin(), E = M.end(); F != E; ++F) {
        ModuleFunctionCount++;
        FnBB = nBB;
        errs() << "F" << ModuleFunctionCount << ": " << F->getNameStr() << "\n";
        if (F->isDeclaration()) continue;
//        DumpDebugInfo(getAddr(FnBB, 0), *(F->begin()->begin()));
        Function *FunPtr = F;
        for (Function::iterator BB = F->begin(), E = F->end(); BB != E; ++BB) {
          nBB++;
          runOnBasicBlock(M, BB, FunPtr);
          FunPtr = NULL;
        }
        Instruction* First = F->begin()->begin();
        std::vector<Value*> inst(1);
        inst[0] = BitCastInst::CreatePointerCast(F, Int8Ptr, "fcast", First);
        CallInst::Create(RtnCallFn, inst.begin(), inst.end(), "", First);
      }
      return true;
    }

    void DumpDebugInfo(uintptr_t addr, Instruction &IN) {
      DILocation Loc(IN.getMetadata("dbg"));
      errs() << "->";
      errs().write_hex(addr);
      errs() << "|" <<  IN.getParent()->getParent()->getNameStr() << "|" <<
                Loc.getFilename() << "|" << Loc.getLineNumber() << "|" <<
                Loc.getDirectory() << "\n";
    }

    bool MakePassport(Module &M, Function::iterator &BB) {
      Passport passport;
      bool isStore, isMop;
      int size;
      BBNumMops = 0;
      for (BasicBlock::iterator BI = BB->begin(), BE = BB->end();
           BI != BE; ++BI) {
        isMop = false;
        if (isa<LoadInst>(BI)) {
          isStore = false;
          isMop = true;
        }
        if (isa<StoreInst>(BI)) {
          isStore = true;
          isMop = true;
        }
        if (isMop) {
          size = 32;
          BBNumMops++;
          ModuleMopCount++;
          Value *MopPtr;
          llvm::Instruction &IN = *BI;
          DumpDebugInfo(getAddr(BBCount, BBNumMops), IN);
          if (isStore) {
            MopPtr = (static_cast<StoreInst&>(IN).getPointerOperand());
          } else {
            MopPtr = (static_cast<LoadInst&>(IN).getPointerOperand());
          }
          if (MopPtr->getType() != UIntPtr) {
            Value *Tmp = BitCastInst::CreatePointerCast(MopPtr, UIntPtr, "", BI);
            MopPtr = Tmp;
          }
          if (MopPtr->getType()->isSized()) {
            size = getAnalysis<TargetData>().getTypeStoreSizeInBits(
                                                 MopPtr->getType());
          }

          std::vector<Constant*> mop;
          mop.push_back(ConstantInt::get(Int32, getAddr(BBCount, BBNumMops)));
          mop.push_back(ConstantInt::get(Int32, size/8));
          mop.push_back(ConstantInt::get(Int32, isStore));
          passport.push_back(ConstantStruct::get(MopTy, mop));
        }
      }
      if (BBNumMops) {
        BBPassportType = ArrayType::get(MopTy, BBNumMops);
        BBPassportGlob = new GlobalVariable(
            M,
            BBPassportType,
            false,
            GlobalValue::InternalLinkage,
            ConstantArray::get(BBPassportType, passport),
            "bb_passport",
            false, 0
            );
        return true;
      }
      return false;
    }

    void InstrumentMop(BasicBlock::iterator &BI, bool isStore,
                       Value *TLEB) {
      std::vector<Value*> Args(3);
      llvm::Instruction &IN = *BI;
      if (isStore) {
        Args[0] = (static_cast<StoreInst&>(IN).getPointerOperand());
      } else {
        Args[0] = (static_cast<LoadInst&>(IN).getPointerOperand());
      }
      Args[2] = ConstantInt::get(Int32, isStore);
      Args[0]->getType()->dump();
      if (Args[0]->getType() == UIntPtr) {
      } else {
        Args[0] = BitCastInst::CreatePointerCast(Args[0], UIntPtr, "", BI);
      }
      int size = 32;
      if (Args[0]->getType()->isSized()) {
        size = getAnalysis<TargetData>().getTypeStoreSizeInBits(Args[0]->getType());
      }
      Args[1] = ConstantInt::get(Type::getInt32Ty(BI->getContext()), size/8);
      //CallInst::Create(MopFn, Args.begin(), Args.end(), "", BI);

      std::vector <Value*> idx;
      idx.push_back(ConstantInt::get(Int32, TLEBIndex));
      Value *TLEBPtr =
          GetElementPtrInst::Create(TLEB,
                                    idx.begin(),
                                    idx.end(),
                                    "",
                                    BI);
      new StoreInst(Args[0], TLEBPtr, BI);
      TLEBIndex++;
    }

    bool runOnBasicBlock(Module &M, Function::iterator &BB,
                         Function *FunPtrOrNull) {
      BBCount++;
      TLEBIndex = 0;
      Value *TLEB = NULL;
      if (MakePassport(M, BB)) {
      //if (BBNumMops == 0) return true;  // no instrumentation needed
        BasicBlock::iterator First = BB->begin();
        errs() << "BI: " << First->getOpcodeName() << "\n";
        std::vector <Value*> Args(3);
        std::vector <Value*> idx;
        idx.push_back(ConstantInt::get(Int32, 0));
        idx.push_back(ConstantInt::get(Int32, 0));
        Args[0] =
          GetElementPtrInst::Create(BBPassportGlob,
                                      idx.begin(),
                                      idx.end(),
                                      "",
                                      First);

        Args[1] = ConstantInt::get(Int32, BBNumMops);
        if (FunPtrOrNull) {
          Args[2] = BitCastInst::CreatePointerCast(FunPtrOrNull, Int32, "fcast", First);
        } else {
          Args[2] = ConstantInt::get(Int32, getAddr(BBCount, 0));
        }
        TLEB = CallInst::Create(BBFlushFn, Args.begin(), Args.end(), "",
                           First);
      }

      errs() << "========BB("<< BBCount<<")===========\n";

      for (BasicBlock::iterator BI = BB->begin(), BE = BB->end();
           BI != BE; ++BI) {
        if (isa<LoadInst>(BI)) {
          errs() << "<";
          // Instrument LOAD.
          InstrumentMop(BI, false, TLEB);
        } else {
          if (isa<StoreInst>(BI)) {
            errs() << ">";
            // Instrument STORE.
            InstrumentMop(BI, true, TLEB);
          } else {
            if (isa<CallInst>(BI)) {
              std::vector<Value*> inst(1);
              llvm::Instruction &IN = *BI;
              if (static_cast<CallInst&>(IN).getCalledFunction() == BBFlushFn) {
                // TODO(glider): we shouldn't encounter BBFlushFn at all.
                continue;
              }

            } else {
              if (isa<ReturnInst>(BI)) {
                errs() << "-";
                std::vector<Value*> inst(0);
                CallInst::Create(RtnExitFn, inst.begin(), inst.end(), "", BI);
              } else {
                errs() << " ";
              }
            }
          }
        }
        errs() << "BI: " << BI->getOpcodeName() << "\n";
      }
      errs() << "========BB===========\n";

      return true;
    }
  private:
    virtual void getAnalysisUsage(AnalysisUsage &AU) const {
      AU.addRequired<TargetData>();
    }
  };
  // }}}
}

char TsanOfflineInstrument::ID = 0;
char TsanOnlineInstrument::ID = 0;
INITIALIZE_PASS(TsanOfflineInstrument, "offline",
                "Hello World Pass (with getAnalysisUsage implemented)",
                false, false);
INITIALIZE_PASS(TsanOnlineInstrument, "online",
                "Hello World Pass (with getAnalysisUsage implemented)",
                false, false);
