# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}


####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave('bot1name', 'bot1pazzwd'),
               BuildSlave('bot2name', 'bot2pazzwd'),
               BuildSlave('bot3name', 'bot3pazzwd')]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave('bot1name', 'bot1passwd', max_builds=2)]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

svnurl='http://data-race-test.googlecode.com/svn/trunk'

from buildbot.changes.svnpoller import SVNPoller
svn_poller = SVNPoller(
                   svnurl=svnurl,
                   pollinterval=10*60, # seconds
                   histmax=10,
                   svnbin='/usr/bin/svn')
c['sources'] = [ svn_poller ]


####### SCHEDULERS

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name='all', branch=None,
                                 treeStableTimer=10,
                                 builderNames=['buildbot-linux',
                                               'buildbot-windows',
                                               'buildbot-linux-pin']))


####### BUILDERS

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Test
from buildbot.steps.shell import ShellCommand


def unitTestBinary(os, bits, opt, static, test_base_name='racecheck_unittest'):
  if bits == 64:
    arch = 'amd64'
  else:
    arch = 'x86'
  name = 'unittest/bin/%s-%s-%s-O%d' % (test_base_name, os, arch, opt)
  if static:
    name += '-static'
  return name

def addBuildTestStep(factory, os, bits, opt, static, test_base_name='racecheck_unittest'):
  """Adds a step for building a unit test binary."""
  desc = []
  command = ['make', '-C', 'unittest']
  command.append('OS=%s' % os)
  desc.append(os)

  if bits == 64:
    command.append('ARCH=amd64')
  else:
    command.append('ARCH=x86')
  desc.append(str(bits))

  command.append('OPT=%d' % opt)
  desc.append('O%d' % opt)

  command.append('STATIC=%d' % static)
  if static:
    desc.append('static')

  desc_common = test_base_name + '(' + ','.join(desc) + ')'
  print command
  factory.addStep(Compile(command = command,
                          description = 'building ' + desc_common,
                          descriptionDone = 'build ' + desc_common))
  return (unitTestBinary(os, bits, opt, static, test_base_name=test_base_name), desc_common)


def addTestStep(factory, debug, mode, test_binary, test_desc,
                frontend_binary=None, extra_args=[], frontend='valgrind', pin_root=None):
  """Adds a step for running unit tests with tsan."""
  args = []
  env = {}
  desc = []

  if frontend == 'valgrind':
    frontend_binary = frontend_binary or 'out/bin/valgrind'
  elif frontend == 'pin':
    frontend_binary = frontend_binary or 'tsan/tsan_pin.sh'

  if frontend == 'valgrind':
    tool_arg = '--tool=tsan'
    if debug:
      tool_arg += '-debug'
      desc.append('debug')
    args.append(tool_arg)

  if frontend == 'pin':
    if pin_root:
      env['PIN_ROOT'] = pin_root
    env['TS_ROOT'] = 'tsan'

  if mode == 'phb':
    env['TSAN_PURE_HAPPENS_BEFORE'] = '1'
    args.extend(['--pure-happens-before=yes', '--ignore-in-dtor=no'])
  elif mode == 'fast':
    env['TSAN_FAST_MODE'] = '1'
    args.extend(['--fast-mode=yes', '--pure-happens-before=no', '--ignore-in-dtor=yes'])
  else: # mode == 'slow'
    args.extend(['--fast-mode=no', '--pure-happens-before=no', '--ignore-in-dtor=no'])

  desc.append(mode)
  desc_common = 'tsan-' + frontend + '(' + ','.join(desc) + ')'

  command = [frontend_binary] + extra_args + args + [test_binary]
  print command
  factory.addStep(Test(command = command, env = env,
                       description = 'testing ' + desc_common + ' on ' + test_desc,
                       descriptionDone = 'test ' + desc_common + ' on ' + test_desc))


f1 = factory.BuildFactory()

# Checkout sources.
f1.addStep(SVN(svnurl=svnurl, mode='copy'))

# Build valgrind+tsan and install them to out/.
f1.addStep(ShellCommand(command='cd third_party && ./update_valgrind.sh && ' +
                        './build_and_install_valgrind.sh `pwd`/../out',
                        description='building valgrind',
                        descriptionDone='build valgrind'))
f1.addStep(Compile(command=['make', '-C', 'tsan', '-j4', 'OFFLINE=',
                            'GTEST_ROOT=', 'PIN_ROOT=', 'lo', 'ld'],
                   description='building tsan',
                   descriptionDone='build tsan'))
f1.addStep(ShellCommand(command=['make', '-C', 'tsan', 'install',
                                 'VALGRIND_INST_ROOT=../out'],
                        description='installing tsan',
                        descriptionDone='install tsan'))

# Test that mk-self-contained-tsan works. Output is unused.
f1.addStep(ShellCommand(command=['tsan_binary/mk-self-contained-tsan.sh',
                                 'out', 'tsan.sh'],
                        description='packing self-contained tsan',
                        descriptionDone='pack self-contained tsan'))

# Build 32-bit valgrind+tsan and install them to out32/.
f1.addStep(ShellCommand(command='cd third_party && ' +
                        './build_and_install_valgrind.sh `pwd`/../out32 --enable-only32bit',
                        description='building 32-bit valgrind',
                        descriptionDone='build 32-bit valgrind'))
f1.addStep(Compile(command=['make', '-C', 'tsan', '-j4', 'OFFLINE=',
                            'GTEST_ROOT=', 'PIN_ROOT=', 'lo', 'ld'],
                   description='building 32-bit tsan',
                   descriptionDone='build 32-bit tsan'))
f1.addStep(ShellCommand(command=['make', '-C', 'tsan', 'install',
                                 'VALGRIND_INST_ROOT=../out32'],
                        description='installing 32-bit tsan',
                        descriptionDone='install 32-bit tsan'))


# Run unit tests.
test_binaries = {} # (bits, opt, static) -> (binary, desc)
os = 'linux'
#                  test binary | tsan + run parameters
#             bits, opt, static,   tsan-debug,   mode
variants = [((  64,   1, False),(        True, 'fast')),
            ((  64,   1, False),(        True, 'slow')),
            ((  64,   1, False),(        True,  'phb')),
            ((  32,   1, False),(        True, 'slow')),
            ((  64,   0, False),(        True, 'slow')),
            ((  64,   1, False),(       False,  'phb'))]
for (test_variant, run_variant) in variants:
  (tsan_debug, mode) = run_variant
  if not test_binaries.has_key(test_variant):
    (bits, opt, static) = test_variant
    (test_binary, test_desc) = addBuildTestStep(f1, os, bits, opt, static)
    test_binaries[test_variant] = (test_binary, test_desc)
  addTestStep(f1, tsan_debug, mode, test_binary, test_desc)


# Run unit tests with 32-bit valgrind.
(test_binary, test_desc) = test_binaries[(32, 1, False)]
addTestStep(f1, False, 'fast', test_binary, test_desc + '(32-bit valgrind)',
            frontend_binary='out32/bin/valgrind')

b1 = {'name': 'buildbot-linux',
      'slavename': 'bot1name',
      'builddir': 'full',
      'factory': f1,
      }

f1 = None # foolproof

### Windows

f2 = factory.BuildFactory()

# Checkout sources.
f2.addStep(SVN(svnurl=svnurl, mode='copy'))

# Build tsan + pin.
f2.addStep(Compile(command=['make', '-C', 'tsan', '-j4',
                            'GTEST_ROOT=', 'VALGRIND_ROOT=', 'PIN_ROOT=c:/pin',
                            'w'],
                   description='building tsan with pin',
                   descriptionDone='build tsan with pin'))

# Run tests.
test_binaries = {} # (os, bits, opt, static, name) -> (binary, desc)
os = 'windows'
bits = '32'
static = False
base_name = 'demo_tests'
for opt in [0, 1]:
  (test_binary, test_desc) = addBuildTestStep(f2, os, bits, opt, static, test_base_name=base_name)
  test_binaries[(os, bits, opt, static, base_name)] = (test_binary, test_desc)
  addTestStep(f2, False, 'fast', test_binary, test_desc, frontend='pin', pin_root='c:/pin')

b2 = {'name': 'buildbot-windows',
      'slavename': 'bot2name',
      'builddir': 'full_win',
      'factory': f2,
      }

f2 = None

### Linux + pin

f3 = factory.BuildFactory()

# Checkout sources.
f3.addStep(SVN(svnurl=svnurl, mode='copy'))

# Build tsan + pin.
f3.addStep(Compile(command=['make', '-C', 'tsan', '-j4',
                            'GTEST_ROOT=', 'VALGRIND_ROOT=',
                            'PIN_ROOT=/home/build/nonconf/google3/third_party/pin/pin-2.6-27887',
                            'ld'],
                   description='building tsan with pin',
                   descriptionDone='build tsan with pin'))

# Run unit tests.
test_binaries = {} # (bits, opt, static) -> (binary, desc)
os = 'linux'
base_name = 'demo_tests'
#                  test binary | tsan + run parameters
#             bits, opt, static,   tsan-debug,   mode
variants = [((  64,   1, False),(        True, 'fast')),
            ((  64,   1, False),(        True, 'slow')),
            ((  64,   1, False),(        True,  'phb')),
            ((  32,   1, False),(        True, 'slow')),
            ((  64,   0, False),(        True, 'slow'))]
for (test_variant, run_variant) in variants:
  (tsan_debug, mode) = run_variant
  if not test_binaries.has_key(test_variant):
    (bits, opt, static) = test_variant
    (test_binary, test_desc) = addBuildTestStep(f3, os, bits, opt, static, test_base_name=base_name)
    test_binaries[test_variant] = (test_binary, test_desc)
  addTestStep(f3, tsan_debug, mode, test_binary, test_desc, frontend='pin',
              pin_root='/home/build/nonconf/google3/third_party/pin/pin-2.6-27887')


b3 = {'name': 'buildbot-linux-pin',
      'slavename': 'bot3name',
      'builddir': 'full_linux_pin',
      'factory': f3,
      }

f3 = None


c['builders'] = [b1, b2, b3]


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr='buildbot@localhost',
#                                      extraRecipients=['builds@example.com'],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host='irc.example.com', nick='bb',
#                              channels=['#example']))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### PROJECT IDENTITY

c['projectName'] = 'ThreadSanitizer'
c['projectURL'] = 'http://code.google.com/p/data-race-test'
c['buildbotURL'] = 'http://kcc-box.eem:8010/'
