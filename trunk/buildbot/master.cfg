# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}


####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave('bot1name', 'bot1pazzwd'),
               BuildSlave('bot2name', 'bot2pazzwd'),
               BuildSlave('bot3name', 'bot3pazzwd'),
               BuildSlave('bot4name', 'bot4pazzwd'),
               BuildSlave('bot5name', 'bot5pazzwd'),
               BuildSlave('bot6name', 'bot6pazzwd'),
               BuildSlave('bot7name', 'bot7pazzwd')]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave('bot1name', 'bot1passwd', max_builds=2)]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

settings = {
    'svnurl':  'http://data-race-test.googlecode.com/svn/trunk'
}

from buildbot.changes.svnpoller import SVNPoller
svn_poller = SVNPoller(
                   svnurl=settings['svnurl'],
                   pollinterval=10*60, # seconds
                   histmax=10,
                   svnbin='/usr/bin/svn')
c['sources'] = [ svn_poller ]



####### BUILDERS

# reload the common module
import common
reload(common)

import builder_linux
import builder_linux_small
import builder_windows
import builder_linux_pin
import builder_mac
import builder_experimental
import builder_linux_build

c['builders'] = []

for module in [builder_linux,
               builder_linux_small,
               builder_windows,
               builder_linux_pin,
               builder_mac,
               builder_experimental,
               builder_linux_build]:
  reload(module)
  c['builders'].append(module.generate(settings))


####### SCHEDULERS

from buildbot.scheduler import Scheduler
from buildbot.scheduler import Dependent

commonBuilderNames = ['buildbot-linux',
                'buildbot-linux-small',
                'buildbot-windows',
                'buildbot-linux-pin',
                'buildbot-mac']

sched_common = Scheduler(name='common', branch=None,
                         treeStableTimer=10,
                         builderNames=commonBuilderNames)
sched_build = Scheduler(name='build', branch=None,
                        treeStableTimer=10,
                        builderNames=['buildbot-linux-build'])
sched_experimental = Dependent(name='experimental',
                               upstream=sched_build,
                               builderNames=['buildbot-experimental'])

c['schedulers'] = [sched_common,
                   sched_build,
                   sched_experimental]

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr='buildbot@localhost',
#                                      extraRecipients=['builds@example.com'],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host='irc.example.com', nick='bb',
#                              channels=['#example']))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### PROJECT IDENTITY

c['projectName'] = 'ThreadSanitizer'
c['projectURL'] = 'http://code.google.com/p/data-race-test'
c['buildbotURL'] = 'http://kcc-box.eem:8010/waterfall'
