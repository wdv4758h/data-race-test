# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}


####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave('bot1name', 'bot1pazzwd'),
               BuildSlave('bot2name', 'bot2pazzwd'),
               BuildSlave('bot3name', 'bot3pazzwd'),
               BuildSlave('bot4name', 'bot4pazzwd'),
               BuildSlave('bot5name', 'bot5pazzwd'),
               BuildSlave('bot6name', 'bot6pazzwd'),
               BuildSlave('bot7name', 'bot7pazzwd'),
               BuildSlave('bot8name', 'bot8pazzwd'),
               BuildSlave('bot9name', 'bot9pazzwd')]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave('bot1name', 'bot1passwd', max_builds=2)]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

settings = {
    'svnurl':  'http://data-race-test.googlecode.com/svn/trunk'
}

from buildbot.changes.svnpoller import SVNPoller
svn_poller = SVNPoller(
                   svnurl=settings['svnurl'],
                   pollinterval=60, # seconds
                   histmax=10,
                   svnbin='/usr/bin/svn')
c['sources'] = [ svn_poller ]



####### BUILDERS

# reload the common module
import common
reload(common)

import builder_linux
import builder_linux_small
import builder_windows
import builder_linux_pin
import builder_mac
import builder_experimental
import builder_valgrind
import builder_linux_build
import builder_windows_build
import builder_wine

c['builders'] = []

for module in [builder_valgrind,
               builder_linux_build,
               builder_linux_small,
               builder_linux,
               builder_linux_pin,
               builder_windows,
               builder_mac,
               builder_experimental,
               builder_windows_build,
               builder_wine]:
  reload(module)
  c['builders'].extend(module.generate(settings))


####### SCHEDULERS

from buildbot.scheduler import Scheduler
from buildbot.scheduler import Dependent
from buildbot.scheduler import Periodic

commonBuilderNames = ['buildbot-winxp',
                      'buildbot-vista',
                      'buildbot-mac']
dependentBuilderNames = ['buildbot-experimental',
                         'buildbot-linux',
                         'buildbot-linux-small',
                         'buildbot-linux-pin']

sched_common = Scheduler(name='common', branch=None,
                         treeStableTimer=10,
                         builderNames=commonBuilderNames)
sched_valgrind = Scheduler(name='valgrind', branch=None,
                        treeStableTimer=10,
                        builderNames=['buildbot-valgrind'])
sched_build = Dependent(name='build',
                        upstream=sched_valgrind,
                        builderNames=['buildbot-linux-build'])
sched_tests = Dependent(name='tests',
                        upstream=sched_build,
                        builderNames=dependentBuilderNames)
# Wine needs both linux-build (for tsan) and windows_build (for win32 unittests), but buildbot does not support multiple dependencies.
# Therefore, we make wine depend on windows_build, which, in turn, depends on linux-build. This should not slow down the build much.
sched_windows_build = Dependent(name='windows_build',
                        upstream=sched_build,
                        builderNames=['buildbot-windows-build'])
sched_wine = Dependent(name='wine',
                       upstream=sched_windows_build,
                       builderNames=['buildbot-wine'])
sched_periodic = Periodic(name='periodic',
                          builderNames=commonBuilderNames + dependentBuilderNames,
                          periodicBuildTimer=60*60) # 1 hour

c['schedulers'] = [sched_common,
                   sched_valgrind,
                   sched_build,
                   sched_tests,
                   sched_windows_build,
                   sched_wine,
                   sched_periodic]

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010,allowForce=False))
c['status'].append(html.WebStatus(http_port=8011,allowForce=True))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr='buildbot@localhost',
#                                      extraRecipients=['builds@example.com'],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host='irc.example.com', nick='bb',
#                              channels=['#example']))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### PROJECT IDENTITY

c['projectName'] = 'ThreadSanitizer'
c['projectURL'] = 'http://code.google.com/p/data-race-test'
c['buildbotURL'] = 'http://kcc-box.eem:8010/waterfall'
